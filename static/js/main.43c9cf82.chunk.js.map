{"version":3,"sources":["weatherApiKey.js","components/SearchBar.js","components/CurrentPanel.js","components/ForecastPanel.js","components/Charts.js","components/ChartPanel.js","components/WeatherPage.js","components/ToggleUnits.js","components/MapSearch.js","mapboxToken.js","components/PositionSearch.js","components/LocationSearch.js","components/App.js","index.js"],"names":["key","SearchBar","useState","cities","setCities","getCities","value","a","returnCities","length","fetch","response","json","target","clearInput","document","querySelector","className","type","name","autoComplete","required","onChange","onClick","title","htmlFor","map","city","to","pathname","id","state","lat","lon","split","country","CurrentPanel","props","conditions","setConditions","useEffect","units","weather","temp","temp_c","feelsLike","feelslike_c","tempUnit","wind","wind_kph","gust","gust_kph","windUnit","precipitation","precip_mm","precipitationUnit","humidity","humidityUnit","temp_f","feelslike_f","wind_mph","gust_mph","precip_in","src","condition","icon","alt","text","ForecastPanel","avgTemp","day","avgtemp_c","maxWind","maxwind_kph","totalPrecipitation","totalprecip_mm","avgHumidity","avghumidity","avgtemp_f","maxwind_mph","totalprecip_in","changeDay","date","format","Date","TempChart","tempData","data","dataToReturn","d","push","time","getTempData","unit","width","height","chartType","options","curveType","legend","position","backgroundColor","chartArea","vAxis","RainChart","rainData","getRainData","seriesType","series","1","targetAxisIndex","vAxes","0","baseline","minValue","WindChart","windData","getWindData","Charts","chart","ChartPanel","setChart","active","setActive","changeChart","classList","toggle","changeActive","getAttribute","WeatherPage","current","setCurrent","forecast","setForecast","setDay","location","getWeather","mode","forecastday","newDay","differenceInCalendarDays","updateWeather","hour","ToggleUnits","toggleUnits","MapSearch","mapboxgl","accessToken","lng","zoom","def","history","useHistory","toggleVisibility","Map","container","style","center","on","e","loc","lngLat","toFixed","PositionSearch","setLoc","setCurrentLoc","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","LocationSearch","App","setUnits","path","render","routeProps","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43c9cf82.chunk.js","sourcesContent":["const key = '04efe69dd13644fda57113404202910';\n\nexport default key;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport key from '../weatherApiKey';\nimport '../styles/SearchBar.scss';\n\nfunction SearchBar() {\n  const [cities, setCities] = useState([]);\n\n  async function getCities(value) {\n    // get an array of city objects that can be searched and used with API\n    let returnCities = [];\n    if (value.length > 0) {\n      const response = await fetch(\n        `http://api.weatherapi.com/v1/search.json?key=${key}&q=${value}`,\n      );\n      returnCities = await response.json();\n    }\n\n    return returnCities;\n  }\n\n  async function updateCities({ target }) {\n    const returnCities = await getCities(target.value);\n    setCities(returnCities);\n  }\n\n  function clearInput() {\n    const input = document.querySelector('.search-input');\n    input.value = '';\n    setCities([]);\n  }\n\n  return (\n    <div className=\"search\">\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          name=\"city\"\n          autoComplete=\"off\"\n          required\n          onChange={updateCities}\n          onClick={clearInput}\n          className=\"search-input\"\n          title=\"Search by city\"\n        />\n        <label htmlFor=\"city\" className=\"city-label\">\n          <span className=\"label-content\">City</span>\n        </label>\n      </div>\n      <div className=\"search-result\">\n        {cities.map((city) => (\n          <Link\n            key={city.id}\n            to={{\n              pathname: `/${city.id}`,\n              state: {\n                lat: city.lat,\n                lon: city.lon,\n                name: `in ${city.name.split(',')[0]}`,\n              },\n            }}\n            className=\"city-data\"\n            onClick={clearInput}\n          >\n            <h2>{city.name.split(',')[0]}</h2>\n            <h3>{city.country}</h3>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useState, useEffect } from 'react';\nimport '../styles/Panel.scss';\n\nfunction CurrentPanel(props) {\n  const [conditions, setConditions] = useState({});\n\n  function changeConditions(units, weather) {\n    if (units === 'metric') {\n      return {\n        temp: weather.temp_c,\n        feelsLike: weather.feelslike_c,\n        tempUnit: 'C',\n        wind: weather.wind_kph,\n        gust: weather.gust_kph,\n        windUnit: 'kph',\n        precipitation: weather.precip_mm,\n        precipitationUnit: 'mm',\n        humidity: weather.humidity,\n        humidityUnit: '%',\n      };\n    }\n    if (units === 'imperial') {\n      return {\n        temp: weather.temp_f,\n        feelsLike: weather.feelslike_f,\n        tempUnit: 'F',\n        wind: weather.wind_mph,\n        gust: weather.gust_mph,\n        windUnit: 'mph',\n        precipitation: weather.precip_in,\n        precipitationUnit: 'in',\n        humidity: weather.humidity,\n        humidityUnit: '%',\n      };\n    }\n    return {};\n  }\n\n  useEffect(() => {\n    setConditions(changeConditions(props.units, props.weather));\n  }, [props.units, props.weather]);\n\n  return (\n    <div className=\"panel-wrapper\">\n      <div className=\"panel current\">\n        <h2 className=\"description\">\n          {'Current weather '}\n          {props.city}\n        </h2>\n        <span className=\"column-wrapper\">\n          <img src={props.weather.condition.icon} alt=\"\" />\n          <p className=\"condition\">{props.weather.condition.text}</p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'temperature: '}</p>\n          <p>\n            {conditions.temp}\n            <span>&#176;</span>\n            {conditions.tempUnit}\n            {' (feels like '}\n            {conditions.feelsLike}\n            <span>&#176;</span>\n            {conditions.tempUnit}\n            {')'}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'wind speed: '}</p>\n          <p>\n            {conditions.wind}\n            {' '}\n            {conditions.windUnit}\n            {' (gusts up to '}\n            {conditions.gust}\n            {' '}\n            {conditions.windUnit}\n            {')'}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'precipitation: '}</p>\n          <p>\n            {conditions.precipitation}\n            {' '}\n            {conditions.precipitationUnit}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'humidity: '}</p>\n          <p>\n            {conditions.humidity}\n            {'%'}\n          </p>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentPanel;\n","import { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport '../styles/Panel.scss';\n\nfunction ForecastPanel(props) {\n  const [conditions, setConditions] = useState({});\n\n  function changeConditions(units, weather) {\n    if (units === 'metric') {\n      return {\n        avgTemp: weather.day.avgtemp_c,\n        tempUnit: 'C',\n        maxWind: weather.day.maxwind_kph,\n        windUnit: 'kph',\n        totalPrecipitation: weather.day.totalprecip_mm,\n        precipitationUnit: 'mm',\n        avgHumidity: weather.day.avghumidity,\n        humidityUnit: '%',\n      };\n    }\n    if (units === 'imperial') {\n      return {\n        avgTemp: weather.day.avgtemp_f,\n        tempUnit: 'F',\n        maxWind: weather.day.maxwind_mph,\n        windUnit: 'mph',\n        totalPrecipitation: weather.day.totalprecip_in,\n        precipitationUnit: 'in',\n        avgHumidity: weather.day.avghumidity,\n        humidityUnit: '%',\n      };\n    }\n    return {};\n  }\n\n  useEffect(() => {\n    setConditions(changeConditions(props.units, props.weather));\n  }, [props.units, props.weather]);\n\n  return (\n    <div className=\"panel-wrapper\">\n      <div className=\"panel forecast\" onClick={() => props.changeDay(props.weather.date)}>\n        <h2 className=\"description\">{format(new Date(props.weather.date), 'do MMMM')}</h2>\n        <span className=\"column-wrapper\">\n          <img src={props.weather.day.condition.icon} alt=\"\" />\n          <p className=\"condition\">{props.weather.day.condition.text}</p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'average temperature: '}</p>\n          <p>\n            {conditions.avgTemp}\n            <span>&#176;</span>\n            {conditions.tempUnit}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'max wind speed: '}</p>\n          <p>\n            {conditions.maxWind}\n            {' '}\n            {conditions.windUnit}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'total precipitation: '}</p>\n          <p>\n            {conditions.totalPrecipitation}\n            {' '}\n            {conditions.precipitationUnit}\n          </p>\n        </span>\n        <span className=\"row-wrapper\">\n          <p>{'average humidity: '}</p>\n          <p>\n            {conditions.avgHumidity}\n            {conditions.humidityUnit}\n          </p>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default ForecastPanel;\n","import { format } from 'date-fns';\nimport Chart from 'react-google-charts';\n\nfunction TempChart(props) {\n  function getTempData(data) {\n    const dataToReturn = [];\n    data.map((d) => dataToReturn.push([\n      format(new Date(d.time), 'H:mm'),\n      props.units === 'metric' ? d.temp_c : d.temp_f,\n      props.units === 'metric' ? d.feelslike_c : d.feelslike_f,\n    ]));\n    return dataToReturn;\n  }\n\n  const tempData = getTempData(props.weather);\n  const unit = props.units === 'metric' ? 'Celsius' : 'Fahrenheit';\n\n  return (\n    <Chart\n      width={'100%'}\n      height={'100%'}\n      chartType={'LineChart'}\n      data={[['hour', 'temperature', 'percived'], ...tempData]}\n      options={{\n        curveType: 'function',\n        legend: { position: 'bottom' },\n        backgroundColor: '#f5f6fe',\n        chartArea: {\n          width: '80%',\n          height: '60%',\n        },\n        vAxis: { title: `Degrees (${unit})` },\n      }}\n    />\n  );\n}\n\nfunction RainChart(props) {\n  function getRainData(data) {\n    const dataToReturn = [];\n    data.map((d) => dataToReturn.push([\n      format(new Date(d.time), 'H:mm'),\n      props.units === 'metric' ? d.precip_mm : d.precip_in,\n      d.humidity,\n    ]));\n    return dataToReturn;\n  }\n\n  const rainData = getRainData(props.weather);\n  const unit = props.units === 'metric' ? 'mm' : 'in';\n\n  return (\n    <Chart\n      width={'100%'}\n      height={'100%'}\n      chartType={'ComboChart'}\n      data={[['hour', 'precipitation', 'humidity'], ...rainData]}\n      options={{\n        curveType: 'function',\n        legend: { position: 'bottom' },\n        backgroundColor: '#f5f6fe',\n        chartArea: {\n          width: '80%',\n          height: '60%',\n        },\n        seriesType: 'bars',\n        series: {\n          1: { targetAxisIndex: '1', type: 'line' },\n        },\n        vAxes: {\n          0: { title: `Precipitation (${unit})`, baseline: 0, minValue: 1 },\n          1: { title: 'Humidity (%)', baseline: 0 },\n        },\n        vAxis: { baseline: 0 },\n      }}\n    />\n  );\n}\n\nfunction WindChart(props) {\n  function getWindData(data) {\n    const dataToReturn = [];\n    data.map((d) => dataToReturn.push([\n      format(new Date(d.time), 'H:mm'),\n      props.units === 'metric' ? d.wind_kph : d.wind_mph,\n      props.units === 'metric' ? d.gust_kph : d.gust_mph,\n    ]));\n    return dataToReturn;\n  }\n\n  const windData = getWindData(props.weather);\n  const unit = props.units === 'metric' ? 'kph' : 'mph';\n\n  return (\n    <Chart\n      width={'100%'}\n      height={'100%'}\n      chartType={'LineChart'}\n      data={[['hour', 'wind', 'gusts'], ...windData]}\n      options={{\n        curveType: 'function',\n        legend: { position: 'bottom' },\n        backgroundColor: '#f5f6fe',\n        chartArea: {\n          width: '80%',\n          height: '60%',\n        },\n        vAxis: { title: `Strength (${unit})` },\n      }}\n    />\n  );\n}\n\nfunction Charts(props) {\n  switch (props.chart) {\n    case 'temp':\n      return <TempChart units={props.units} weather={props.weather} />;\n    case 'rain':\n      return <RainChart units={props.units} weather={props.weather} />;\n    case 'wind':\n      return <WindChart units={props.units} weather={props.weather} />;\n    default:\n      break;\n  }\n}\n\nexport default Charts;\n","import { useState, useEffect } from 'react';\nimport Charts from './Charts';\nimport '../styles/Panel.scss';\n\nfunction ChartPanel(props) {\n  const [chart, setChart] = useState('temp');\n  const [active, setActive] = useState(null);\n\n  function changeActive(target) {\n    // changes element with class 'active'\n    active.classList.toggle('active');\n    target.classList.toggle('active');\n    setActive(target);\n  }\n\n  function changeChart({ target }) {\n    changeActive(target);\n    setChart(target.getAttribute('data'));\n  }\n\n  useEffect(() => {\n    // sets current element with class 'active' to variable\n    setActive(document.querySelector('.active'));\n  }, []);\n\n  return (\n    <div className=\"panel-wrapper large\">\n      <div className=\"panel\">\n        <div className=\"choose-chart\">\n          <button type=\"button\" onClick={changeChart} data=\"temp\" className=\"active\">Temp</button>\n          <button type=\"button\" onClick={changeChart} data=\"rain\">Rain</button>\n          <button type=\"button\" onClick={changeChart} data=\"wind\">Wind</button>\n        </div>\n        <Charts chart={chart} units={props.units} weather={props.weather} />\n      </div>\n    </div>\n  );\n}\n\nexport default ChartPanel;\n","import { useState, useEffect } from 'react';\nimport { differenceInCalendarDays } from 'date-fns';\nimport CurrentPanel from './CurrentPanel';\nimport ForecastPanel from './ForecastPanel';\nimport ChartPanel from './ChartPanel';\nimport key from '../weatherApiKey';\nimport '../styles/WeatherPage.scss';\n\nfunction WeatherPage(props) {\n  const [current, setCurrent] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [day, setDay] = useState(0);\n  const city = props.location.state.name;\n\n  async function getWeather() {\n    // get data from API\n    const response = await fetch(\n      `http://api.weatherapi.com/v1/forecast.json?key=${key}&q=${props.location.state.lat},${props.location.state.lon}&days=3`,\n      { mode: 'cors' },\n    );\n    const data = await response.json();\n\n    return data;\n  }\n\n  async function updateWeather() {\n    // set data to variables\n    const weather = await getWeather();\n    setCurrent(weather.current);\n    setForecast(weather.forecast.forecastday);\n  }\n\n  function changeDay(date) {\n    const newDay = differenceInCalendarDays(new Date(date), new Date(forecast[0].date));\n    setDay(newDay);\n  }\n\n  useEffect(() => {\n    // update weather if we change path (in this case id of city)\n    updateWeather();\n  }, [props.location.pathname]);\n\n  if (!current || !forecast || !city) {\n    // if data is not yet present render nothing (otherwise it would throw error in children render)\n    return null;\n  }\n  return (\n    <div className=\"weather-wrapper\">\n      <div className=\"weather-page\">\n        <CurrentPanel weather={current} city={city} units={props.units} />\n        <ChartPanel weather={forecast[day].hour} units={props.units} />\n        <ForecastPanel weather={forecast[0]} changeDay={changeDay} units={props.units} />\n        <ForecastPanel weather={forecast[1]} changeDay={changeDay} units={props.units} />\n        <ForecastPanel weather={forecast[2]} changeDay={changeDay} units={props.units} />\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherPage;\n","import '../styles/ToggleUnits.scss';\n\nfunction ToggleUnits(props) {\n  return (\n    <div className=\"toggle-wrapper\">\n      <h3>Metric</h3>\n      <input type=\"checkbox\" id=\"toggle\" className=\"checkbox\" />\n      <label htmlFor=\"toggle\" className=\"switch\" onClick={props.toggleUnits} />\n      <h3>Imperial</h3>\n    </div>\n  );\n}\n\nexport default ToggleUnits;\n","import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport mapboxgl from 'mapbox-gl';\nimport token from '../mapboxToken';\nimport '../styles/MapSearch.scss';\n\nfunction MapSearch() {\n  mapboxgl.accessToken = token;\n  const [def] = useState({\n    lng: 20,\n    lat: 50,\n    zoom: 2,\n  });\n  const history = useHistory();\n\n  function toggleVisibility() {\n    const map = document.querySelector('#map');\n    map.classList.toggle('visible');\n  }\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: document.querySelector('#map-container'),\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [def.lng, def.lat],\n      zoom: def.zoom,\n    });\n\n    map.on('click', (e) => {\n      const loc = e.lngLat;\n      history.push({\n        pathname: `/${loc.lat.toFixed(2)},${loc.lng.toFixed(2)}`,\n        state: {\n          lat: loc.lat.toFixed(2),\n          lon: loc.lng.toFixed(2),\n          name: `at ${loc.lat.toFixed(2)}, ${loc.lng.toFixed(2)}`,\n        },\n      });\n      toggleVisibility();\n    });\n  }, []);\n\n  return (\n    <div className=\"map-wrapper\">\n      <div className=\"map\" id=\"map\">\n        <div className=\"map-container\" id=\"map-container\" title=\"Click on map to choose location\" />\n      </div>\n      <i className=\"fas fa-globe-americas\" onClick={toggleVisibility} title=\"Choose from map\" />\n    </div>\n  );\n}\n\nexport default MapSearch;\n","const token = 'pk.eyJ1IjoiZXJpYmxvbyIsImEiOiJja2gwdnZoNzMwMjdpMnhycmd4cGxuOG5uIn0.ruLRAZ94SU5VTd8V8FHX3w';\n\nexport default token;\n","import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../styles/PositionSearch.scss';\n\nfunction PositionSearch() {\n  const [loc, setLoc] = useState([]);\n  const history = useHistory();\n\n  function setCurrentLoc(location) {\n    setLoc([location.coords.latitude.toFixed(2), location.coords.longitude.toFixed(2)]);\n  }\n\n  function getCurrentLoc() {\n    navigator.geolocation.getCurrentPosition(setCurrentLoc);\n  }\n\n  useEffect(() => {\n    if (loc[0] && loc[1]) {\n      history.push({\n        pathname: `/${loc[0]},${loc[1]}`,\n        state: {\n          lat: loc[0],\n          lon: loc[1],\n          name: 'at your location',\n        },\n      });\n    }\n  }, [loc]);\n\n  return (\n    <div className=\"position-wrapper\">\n      <i className=\"fas fa-map-marker-alt\" onClick={getCurrentLoc} title=\"Search by your location\" />\n    </div>\n  );\n}\n\nexport default PositionSearch;\n","import MapSearch from './MapSearch';\nimport PositionSearch from './PositionSearch';\nimport '../styles/LocationSearch.scss';\n\nfunction LocationSearch() {\n  return (\n    <div className=\"location-wrapper\">\n      <MapSearch />\n      <PositionSearch />\n    </div>\n  );\n}\n\nexport default LocationSearch;\n","import { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBar from './SearchBar';\nimport WeatherPage from './WeatherPage';\nimport ToggleUnits from './ToggleUnits';\nimport LocationSearch from './LocationSearch';\nimport '../styles/App.scss';\n\nfunction App() {\n  const [units, setUnits] = useState('metric');\n\n  function toggleUnits() {\n    // toggle between metric and imperial units\n    const newUnits = (units === 'metric' ? 'imperial' : 'metric');\n    setUnits(newUnits);\n  }\n\n  return (\n    <div className=\"app\">\n      <Router>\n        <nav className=\"nav\">\n          <ToggleUnits toggleUnits={toggleUnits} />\n          <SearchBar />\n          <LocationSearch />\n        </nav>\n        <Switch>\n          <Route\n            path=\"/:id\"\n            render={(routeProps) => (\n              <WeatherPage {...routeProps} units={units} />\n            )}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}